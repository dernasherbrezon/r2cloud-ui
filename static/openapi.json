{
	"openapi": "3.0.1",
	"info": {
		"title": "r2cloud API",
		"description": "This is an API definition for r2cloud. It can be used to control base station programmatically",
		"contact": {
			"email": "dernasherbrezon@gmail.com"
		},
		"license": {
			"name": "Apache 2.0",
			"url": "http://www.apache.org/licenses/LICENSE-2.0.html"
		},
		"version": "1.0.0"
	},
	"externalDocs": {
		"description": "Find out more about r2cloud",
		"url": "https://github.com/dernasherbrezon/r2cloud"
	},
	"servers": [
		{
			"url": "/api/v1"
		}
	],
	"tags": [
		{
			"name": "Observation",
			"description": "Manage observations"
		},
		{
			"name": "Schedule",
			"description": "Schedule an observation or cancel already running"
		},
		{
			"name": "Configuration",
			"description": "Manage base station configuration"
		},
		{
			"name": "Status",
			"description": "Monitoring and current hardware status"
		},
		{
			"name": "Setup",
			"description": "Initial setup and restore"
		},
		{
			"name": "System",
			"description": "Login, logout, health"
		}
	],
	"paths": {
		"/admin/tle": {
			"get": {
				"tags": [
					"System"
				],
				"summary": "Get all TLE settings",
				"responses": {
					"200": {
						"description": "List of TLE for each satellite",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TLEResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"Bearer": []
					}
				]
			}
		},	
		"/health": {
			"get": {
				"tags": [
					"System"
				],
				"summary": "Check if r2cloud is up",
				"responses": {
					"200": {
						"description": "If r2cloud is up"
					}
				}
			}
		},	
		"/accessToken": {
			"post": {
				"tags": [
					"System"
				],
				"summary": "Login",
				"requestBody": {
					"description": "Login request",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LoginRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "If authentication failed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Response"
								}
							}
						}
					},
					"200": {
						"description": "Successful login",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LoginResponse"
								}
							}
						}
					}
				}
			}
		},
		"/setup/setup": {
			"post": {
				"tags": [
					"Setup"
				],
				"summary": "Initial base station setup",
				"requestBody": {
					"description": "Setup request",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SetupRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "If keyword mismatched",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Response"
								}
							}
						}
					},
					"400": {
						"description": "If request parameters are missing or empty",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Response"
								}
							}
						}
					},
					"200": {
						"description": "Successful setup and login",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LoginResponse"
								}
							}
						}
					}
				}
			}
		},
		"/setup/restore": {
			"post": {
				"tags": [
					"Setup"
				],
				"summary": "Reset password to the base station",
				"requestBody": {
					"description": "Setup request",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RestoreRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"400": {
						"description": "If request parameters are missing or empty",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Response"
								}
							}
						}
					},
					"200": {
						"description": "Successful password reset"
					}
				}
			}
		},
		"/admin/status/metrics": {
			"get": {
				"tags": [
					"Status"
				],
				"summary": "Get all metrics",
				"responses": {
					"200": {
						"description": "Array of metrics",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Metric"
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"Bearer": []
					}
				]
			}
		},
		"/admin/status/overview": {
			"get": {
				"tags": [
					"Status"
				],
				"summary": "Get overall status",
				"responses": {
					"200": {
						"description": "Base station status",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/StatusOverview"
								}
							}
						}
					}
				},
				"security": [
					{
						"Bearer": []
					}
				]
			}
		},
		"/configured": {
			"get": {
				"tags": [
					"Configuration"
				],
				"summary": "Get base station configuration status",
				"responses": {
					"200": {
						"description": "Configuration status",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ConfigurationStatus"
								}
							}
						}
					}
				}
			}
		},
		"/admin/config/ddns": {
			"get": {
				"tags": [
					"Configuration"
				],
				"summary": "Get base station DDNS configuration",
				"responses": {
					"200": {
						"description": "DDNS configuration",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DDNSConfiguration"
								}
							}
						}
					}
				},
				"security": [
					{
						"Bearer": []
					}
				]
			},
			"post": {
				"tags": [
					"Configuration"
				],
				"summary": "Update base station DDNS configuration",
				"requestBody": {
					"description": "DDNS configuration",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DDNSConfigurationRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"400": {
						"description": "If request parameters are missing or empty",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Response"
								}
							}
						}
					},
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"Bearer": []
					}
				]
			}
		},
		"/admin/config/general": {
			"get": {
				"tags": [
					"Configuration"
				],
				"summary": "Get base station configuration",
				"responses": {
					"200": {
						"description": "General configuration",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Configuration"
								}
							}
						}
					}
				},
				"security": [
					{
						"Bearer": []
					}
				]
			},
			"post": {
				"tags": [
					"Configuration"
				],
				"summary": "Update base station configuration",
				"requestBody": {
					"description": "General configuration",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Configuration"
							}
						}
					},
					"required": true
				},
				"responses": {
					"400": {
						"description": "If request parameters are missing or empty",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Response"
								}
							}
						}
					},
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"Bearer": []
					}
				]
			}
		},
		"/admin/config/r2cloud": {
			"get": {
				"tags": [
					"Configuration"
				],
				"summary": "Get r2server configuration",
				"responses": {
					"200": {
						"description": "R2server configuration",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/R2ServerConfiguration"
								}
							}
						}
					}
				},
				"security": [
					{
						"Bearer": []
					}
				]
			},
			"post": {
				"tags": [
					"Configuration"
				],
				"summary": "Update r2server configuration",
				"requestBody": {
					"description": "R2server configuration",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/R2ServerConfiguration"
							}
						}
					},
					"required": true
				},
				"responses": {
					"400": {
						"description": "If request parameters are missing or empty",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Response"
								}
							}
						}
					},
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"Bearer": []
					}
				]
			}
		},
		"/admin/config/ssl": {
			"get": {
				"tags": [
					"Configuration"
				],
				"summary": "Get SSL configuration",
				"responses": {
					"200": {
						"description": "SSL configuration",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SSLConfiguration"
								}
							}
						}
					}
				},
				"security": [
					{
						"Bearer": []
					}
				]
			},
			"post": {
				"tags": [
					"Configuration"
				],
				"summary": "Update SSL configuration",
				"requestBody": {
					"description": "SSL configuration",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SSLConfiguration"
							}
						}
					},
					"required": true
				},
				"responses": {
					"400": {
						"description": "If request parameters are missing or empty",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Response"
								}
							}
						}
					},
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"Bearer": []
					}
				]
			}
		},
		"/admin/schedule/list": {
			"get": {
				"tags": [
					"Schedule"
				],
				"summary": "Get all satellites and their schedule",
				"responses": {
					"200": {
						"description": "Array of satellites with schedule information",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ScheduleDetails"
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"Bearer": []
					}
				]
			}
		},
		"/admin/schedule/save": {
			"post": {
				"tags": [
					"Schedule"
				],
				"summary": "Add/remove satellite from schedule",
				"description": "If enable=false, then cancel active observation. If enable=true, then schedule new observation",
				"requestBody": {
					"description": "Schedule request",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ScheduleRequest"
							}
						}
					},
					"required": true
				},				
				"responses": {
					"400": {
						"description": "If request parameters are missing or empty",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Response"
								}
							}
						}
					},
					"200": {
						"description": "Satellite schedule information",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ScheduleDetails"
								}
							}
						}
					}
				},
				"security": [
					{
						"Bearer": []
					}
				]
			}
		},
		"/admin/schedule/immediately/start": {
			"post": {
				"tags": [
					"Schedule"
				],
				"summary": "Start observation immediately",
				"description": "Cancel current observation if any and start new one",
				"requestBody": {
					"description": "Satellite id",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Id"
							}
						}
					},
					"required": true
				},				
				"responses": {
					"400": {
						"description": "If request parameters are missing or empty",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Response"
								}
							}
						}
					},
					"404": {
						"description": "If id is unknown"
					},
					"500": {
						"description": "If unable to start immediately"
					},
					"200": {
						"description": "Success. Return id of the newly started observation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Id"
								}
							}
						}
					}
				},
				"security": [
					{
						"Bearer": []
					}
				]
			}
		},
		"/admin/schedule/immediately/complete": {
			"post": {
				"tags": [
					"Schedule"
				],
				"summary": "Complete observation immediately",
				"description": "Complete currently running observation. This will trigger normal demodulation/decoding process",
				"requestBody": {
					"description": "Satellite id",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Id"
							}
						}
					},
					"required": true
				},				
				"responses": {
					"400": {
						"description": "If request parameters are missing or empty",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Response"
								}
							}
						}
					},
					"404": {
						"description": "If id is unknown or no currently running observations"
					},
					"200": {
						"description": "On success"
					}
				},
				"security": [
					{
						"Bearer": []
					}
				]
			}
		},
		"/admin/observation/list": {
			"get": {
				"tags": [
					"Observation"
				],
				"summary": "Get all observations",
				"responses": {
					"200": {
						"description": "Array of observations",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ObservationSummary"
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"Bearer": []
					}
				]
			}
		},
		"/admin/observation/load": {
			"get": {
				"tags": [
					"Observation"
				],
				"summary": "Get observation details",
				"parameters": [
					{
						"name": "id",
						"in": "query",
						"description": "Observation id",
						"required": true,
						"style": "form",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Observation details",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Observation"
								}
							}
						}
					},
					"400": {
						"description": "If id is missing or empty",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Response"
								}
							}
						}
					},
					"404": {
						"description": "If id is unknown"
					}
				},
				"security": [
					{
						"Bearer": []
					}
				]
			}
		},
		"/admin/observation/spectogram": {
			"post": {
				"tags": [
					"Observation"
				],
				"summary": "Generate spectogram for observation",
				"requestBody": {
					"description": "Spectogram request",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SpectogramRequest"
							}
						}
					},
					"required": true
				},				
				"responses": {
					"400": {
						"description": "If request parameters are missing or empty",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Response"
								}
							}
						}
					},
					"404": {
						"description": "If unknown observation"
					},
					"500": {
						"description": "If unable to generate spectogram"
					},
					"200": {
						"description": "URL to the newly generated spectogram",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SpectogramResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"Bearer": []
					}
				]
			}
		}
	},
	"components": {
		"schemas": {
			"SpectogramRequest": {
				"properties": {
					"id": {
						"type": "string",
						"description": "Observation id",
						"example": "1574019119875"
					},
					"satelliteId": {
						"type": "boolean",
						"description": "Satellite id",
						"example": "44387"
					}
				}				
			},
			"ScheduleRequest": {
				"properties": {
					"id": {
						"type": "string",
						"description": "Satellite id",
						"example": "44387"
					},
					"enabled": {
						"type": "boolean",
						"description": "Enable or disable satellite"
					}
				}				
			},
			"RestoreRequest": {
				"properties": {
					"username": {
						"type": "string",
						"description": "Email used during registration",
						"example": "info@example.com"
					}
				}				
			},
			"TLEResponse": {
				"properties": {
					"lastUpdated": {
						"type": "integer",
						"format": "int64",
						"description": "UNIX timestamp. Last updated time",
						"example": "1573906195042"
					},
					"tle": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/TLEArray"
						}
					}
				}
			},
			"TLEArray": {
				"properties": {
					"id": {
						"type": "string",
						"description": "Satellite id",
						"example": "44387"
					},
					"data": {
						"type": "array",
						"description": "Array of TLE elements",
						"items": {
							"type": "string"
						}
					}
				}
			},
		    "SetupRequest": {
				"properties": {
					"username": {
						"type": "string",
						"description": "Email",
						"example": "info@example.com"
					},
					"password": {
						"type": "string",
						"description": "Password"
					},
					"keyword": {
						"type": "string",
						"description": "Keyword from /boot/r2cloud.txt file. Should be pre-configured"
					}
				}
		    },
		    "LoginRequest": {
				"properties": {
					"username": {
						"type": "string",
						"description": "Email",
						"example": "info@example.com"
					},
					"password": {
						"type": "string",
						"description": "Password"
					}
				}
		    },
		    "LoginResponse": {
				"properties": {
					"access_token": {
						"type": "string",
						"description": "Token to use when sending requests"
					},
					"token_type": {
						"type": "string",
						"description": "Always: bearer",
						"example": "bearer"
					},
					"expires_in": {
						"type": "integer",
						"format": "int64",
						"description": "Number of seconds after which this token expires"
					}
				}
		    },
			"Metric": {
				"properties": {
					"id": {
						"type": "string",
						"description": "Metric identifier. Unique",
						"example": "heap"
					},
					"url": {
						"type": "string",
						"description": "URL to RRD file containing historical data"
					},
					"format": {
						"type": "string",
						"description": "Metric format. Applicable only for Formatted metrics. Possible values are: NORMAL, BYTES"
					}
				}
			},
			"ParameterDetails": {
				"properties": {
					"status": {
						"type": "string",
						"description": "Can be: SUCCESS, ERROR, UNKNOWN",
						"example": "SUCCESS"
					},
					"message": {
						"type": "string",
						"description": "optional message describing error"
					}
				}
			},
			"StatusOverview": {
				"properties": {
					"parameterName": {
						"$ref": "#/components/schemas/ParameterDetails"
					}
				}
			},
			"ScheduleDetails": {
				"properties": {
					"id": {
						"type": "string",
						"description": "Satellite id",
						"example": "44387"
					},
					"name": {
						"type": "string",
						"description": "Satellite name",
						"example": "METEOR-M2 2"
					},
					"enabled": {
						"type": "boolean",
						"description": "If satellite is enabled for observation"
					},
					"frequency": {
						"type": "integer",
						"format": "int64",
						"description": "Satellite frequency",
						"example": "137900000"
					},
					"nextPass": {
						"type": "integer",
						"format": "int64",
						"description": "UNIX timestamp. The next scheduled observation time for this satellite. Can be empty if satellite is not enabled",
						"example": "1574019119875"
					}
				}
			},
			"R2ServerConfiguration": {
				"type": "object",
				"properties": {
					"apiKey": {
						"type": "string",
						"description": "API key obtained at https://r2server.ru"
					},
					"syncSpectogram": {
						"type": "boolean",
						"description": "Synchronize spectograms to r2server. If no spectogram available for observation, then it will be created prior to upload"
					}
				}
			},
			"SSLConfiguration": {
				"type": "object",
				"properties": {
					"enabled": {
						"type": "boolean",
						"description": "true - if SSL configuration enabled. false - otherwise"
					},
					"agreeWithToC": {
						"type": "boolean",
						"description": "true - if agree with lets encrypt terms and conditions"
					},
					"domain": {
						"type": "string",
						"description": "domain to setup for SSL",
						"example": "example.ddns.com"
					}
				}
			},
			"Configuration": {
				"type": "object",
				"properties": {
					"lat": {
						"type": "number",
						"format": "double",
						"description": "Latitude of the base station",
						"example": "56.31"
					},
					"lon": {
						"type": "number",
						"format": "double",
						"description": "Longitude of the base station",
						"example": "38.13"
					},
					"autoUpdate": {
						"type": "boolean",
						"description": "true if automatic updates enabled"
					}
				}
			},
			"Response": {
				"type": "object",
				"properties": {
					"errors": {
						"$ref": "#/components/schemas/Errors"
					}
				}
			},
			"DDNSConfigurationRequest": {
				"type": "object",
				"properties": {
					"username": {
						"type": "string",
						"description": "username used for ddns authentication"
					},
					"password": {
						"type": "string",
						"description": "password used for ddns authentication"
					},
					"domain": {
						"type": "string",
						"description": "domain for this base station",
						"example": "example.ddns.com"
					},
					"type": {
						"type": "string",
						"description": "ddns provider",
						"example": "NONE"
					}
				}
			},
			"DDNSConfiguration": {
				"type": "object",
				"properties": {
					"username": {
						"type": "string",
						"description": "username used for ddns authentication"
					},
					"password": {
						"type": "string",
						"description": "password used for ddns authentication"
					},
					"domain": {
						"type": "string",
						"description": "domain for this base station",
						"example": "example.ddns.com"
					},
					"type": {
						"type": "string",
						"description": "ddns provider",
						"example": "NONE"
					},
					"currentIp": {
						"type": "string",
						"description": "Current external IP",
						"example": "127.0.0.1"
					}
				}
			},
			"ConfigurationStatus": {
				"type": "object",
				"properties": {
					"configured": {
						"type": "boolean",
						"description": "true - if base station was previously configured (login/password and coordinates). false - otherwise"
					},
					"generalSetup": {
						"type": "boolean",
						"description": "true - if base station coordinates were previously configured. false - otherwise"
					}
				}
			},
			"Errors": {
				"type": "object",
				"properties": {
					"general": {
						"type": "string",
						"description": "If general error occur",
						"example": "Internal server error"
					},
					"fieldName": {
						"type": "string",
						"description": "Error related to the particular fieldName",
						"example": "Cannot be empty"
					}
				}
			},
			"SpectogramResponse": {
				"type": "object",
				"properties": {
					"spectogramURL": {
						"type": "string",
						"description": "The URL to the newly generated spectogram"
					}
				}
			},
			"Id": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					}
				}
			},
			"ObservationSummary": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"example": "1574019119875",
						"description": "Unique observation identifier"
					},
					"satelliteId": {
						"type": "string",
						"description": "NORAD Id. Unique satellite id",
						"example": "44387"
					},
					"name": {
						"type": "string",
						"example": "METEOR-M2 2"
					},
					"start": {
						"type": "integer",
						"format": "int64",
						"description": "UNIX timestamp"
					},
					"hasData": {
						"type": "boolean",
						"description": "Determines if observation has any data decoded. true - if at least 1 packet was decoded"
					}
				}
			},
			"TLE": {
				"type": "object",
				"properties": {
					"line1": {
						"type": "string",
						"example": "METEOR-M2 2"
					},
					"line2": {
						"type": "string",
						"example": "1 40069U 14037A   18286.52491495 -.00000023  00000-0  92613-5 0  9990"
					},
					"line3": {
						"type": "string",
						"example": "2 40069  98.5901 334.4030 0004544 256.4188 103.6490 14.20654800221188"
					}
				}
			},
			"GroundStation": {
				"type": "object",
				"properties": {
					"lat": {
						"type": "number",
						"format": "double",
						"description": "Latitude of the base station",
						"example": "56.31"
					},
					"lon": {
						"type": "number",
						"format": "double",
						"description": "Longitude of the base station",
						"example": "38.13"
					}
				}
			},
			"Observation": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"example": "1574019119875",
						"description": "Unique observation identifier"
					},
					"satellite": {
						"type": "string",
						"description": "NORAD Id. Unique satellite id",
						"example": "44387"
					},
					"name": {
						"type": "string",
						"example": "METEOR-M2 2"
					},
					"start": {
						"type": "integer",
						"format": "int64",
						"description": "UNIX timestamp"
					},
					"end": {
						"type": "integer",
						"format": "int64",
						"description": "UNIX timestamp"
					},
					"sampleRate": {
						"type": "integer",
						"format": "int64",
						"description": "Samples per second",
						"example": "144000"
					},
					"inputSampleRate": {
						"type": "integer",
						"format": "int64",
						"description": "Samples per second in the raw file",
						"example": "288000"
					},
					"frequency": {
						"type": "integer",
						"format": "int64",
						"description": "Satellite frequency",
						"example": "137900000"
					},
					"actualFrequency": {
						"type": "integer",
						"format": "int64",
						"description": "Actual frequency used while receiving satellite data. Frequency of the raw file",
						"example": "137900000"
					},
					"decoder": {
						"type": "string",
						"description": "Type of decoder to use. Supported values: APT, LRPT, TELEMETRY",
						"example": "LRPT"
					},
					"bandwidth": {
						"type": "integer",
						"format": "int64",
						"description": "Signal bandwidth. Used by demodulator",
						"example": "140000"
					},
					"tle": {
						"$ref": "#/components/schemas/TLE"
					},
					"numberOfDecodedPackets": {
						"type": "integer",
						"format": "int64",
						"description": "Number of decoded packets during this observation",
						"example": "14"
					},
					"groundStation": {
						"$ref": "#/components/schemas/GroundStation"
					}
				}
			}
		},
		"securitySchemes": {
			"Bearer": {
				"type": "http",
				"scheme": "bearer"
			}
		}
	}
}